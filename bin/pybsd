#!/usr/bin/env python3
import argparse
import asyncio
import logging
import os
from configparser import ConfigParser
from itertools import chain

from PyBS import PyBSdaemon
from PyBS.db import Database
from PyBS.mailer import Mailer, Slack
from PyBS.rpcserver import RpcServer


def main():
    # parser
    parser = argparse.ArgumentParser(description='PyBS daemon')
    parser.add_argument('-c', '--config', help='config file', default='/etc/pybs.conf')
    args = parser.parse_args()

    # read config
    config_parser = ConfigParser()
    with open(args.config, 'r') as lines:
        lines = chain(("[pybs]",), lines)
        config_parser.read_file(lines)
    config = config_parser['pybs']

    # set up logger
    logging.basicConfig(level=logging.DEBUG)
    log = logging.getLogger(__name__)

    # create database
    database = Database(config.get('database'))

    # create mailer
    mailer = Mailer(
        sender=config.get('mail-from', None),
        host=config.get('mail-host', None)
    )

    # and slack
    slack = Slack(token=config.get('slack-token', None))

    # get asyncio event loop
    loop = asyncio.get_event_loop()

    # init
    daemon = None
    server = None

    try:
        # create PyBS daemon
        log.info('Starting PyBS daemon...')
        daemon = PyBSdaemon(
            database=database,
            mailer=mailer,
            slack=slack,
            ncpus=int(config.get('ncpus', 4)),
            nodename=config.get('nodename', None),
            root_dir=config.get('root', '/')
        )

        # create RPC server and open it, default port is 16219 (P=16, B=2, S=19)
        server = RpcServer(daemon, config.get('port', 16219))
        loop.run_until_complete(server.open())

        # run until interrupt
        loop.run_forever()

    except KeyboardInterrupt:
        log.info('Shutting down...')

    finally:
        # close PyBS daemon and server
        if daemon is not None:
            daemon.close()
        if server is not None:
            server.close()
            loop.run_until_complete(server.wait_closed())


if __name__ == '__main__':
    main()
